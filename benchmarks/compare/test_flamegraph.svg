<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">test_flamegraph</text><text id="details" fill="rgb(0,0,0)" x="10" y="229.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="229.00"> </text><svg id="frames" x="10" width="1180" total_samples="15268"><g><title>ic_stable_structures::memory_manager::MemoryManagerInner&lt;M&gt;::read_unsafe (68 instructions, 0.45%)</title><rect x="0.0000%" y="117" width="0.4454%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="68"/><text x="0.2500%" y="127.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (96 instructions, 0.63%)</title><rect x="0.4454%" y="101" width="0.6288%" height="15" fill="rgb(217,0,24)" fg:x="68" fg:w="96"/><text x="0.6954%" y="111.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (96 instructions, 0.63%)</title><rect x="1.5719%" y="101" width="0.6288%" height="15" fill="rgb(221,193,54)" fg:x="240" fg:w="96"/><text x="1.8219%" y="111.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (128 instructions, 0.84%)</title><rect x="2.6985%" y="101" width="0.8384%" height="15" fill="rgb(248,212,6)" fg:x="412" fg:w="128"/><text x="2.9485%" y="111.50"></text></g><g><title>ic_stable_structures::safe_write (548 instructions, 3.59%)</title><rect x="0.4454%" y="117" width="3.5892%" height="15" fill="rgb(208,68,35)" fg:x="68" fg:w="548"/><text x="0.6954%" y="127.50">ic_s..</text></g><g><title>ic_stable_structures::btreemap::allocator::Allocator&lt;M&gt;::allocate (923 instructions, 6.05%)</title><rect x="0.0000%" y="133" width="6.0453%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="923"/><text x="0.2500%" y="143.50">ic_stabl..</text></g><g><title>ic_stable_structures::btreemap::BTreeMap&lt;K,V,M&gt;::allocate_node (1,005 instructions, 6.58%)</title><rect x="0.0000%" y="149" width="6.5824%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1005"/><text x="0.2500%" y="159.50">ic_stable..</text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (108 instructions, 0.71%)</title><rect x="6.5824%" y="117" width="0.7074%" height="15" fill="rgb(228,23,34)" fg:x="1005" fg:w="108"/><text x="6.8324%" y="127.50"></text></g><g><title>ic_stable_structures::safe_write (184 instructions, 1.21%)</title><rect x="6.5824%" y="133" width="1.2051%" height="15" fill="rgb(218,30,26)" fg:x="1005" fg:w="184"/><text x="6.8324%" y="143.50"></text></g><g><title>ic_stable_structures::btreemap::BTreeMap&lt;K,V,M&gt;::write_header (202 instructions, 1.32%)</title><rect x="6.5824%" y="149" width="1.3230%" height="15" fill="rgb(220,122,19)" fg:x="1005" fg:w="202"/><text x="6.8324%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (85 instructions, 0.56%)</title><rect x="7.9054%" y="69" width="0.5567%" height="15" fill="rgb(250,228,42)" fg:x="1207" fg:w="85"/><text x="8.1554%" y="79.50"></text></g><g><title>__rdl_alloc (106 instructions, 0.69%)</title><rect x="7.9054%" y="85" width="0.6943%" height="15" fill="rgb(240,193,28)" fg:x="1207" fg:w="106"/><text x="8.1554%" y="95.50"></text></g><g><title>__rust_alloc (114 instructions, 0.75%)</title><rect x="7.9054%" y="101" width="0.7467%" height="15" fill="rgb(216,20,37)" fg:x="1207" fg:w="114"/><text x="8.1554%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (162 instructions, 1.06%)</title><rect x="7.9054%" y="117" width="1.0610%" height="15" fill="rgb(206,188,39)" fg:x="1207" fg:w="162"/><text x="8.1554%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (249 instructions, 1.63%)</title><rect x="7.9054%" y="133" width="1.6309%" height="15" fill="rgb(217,207,13)" fg:x="1207" fg:w="249"/><text x="8.1554%" y="143.50"></text></g><g><title>memcpy (14 instructions, 0.09%)</title><rect x="9.5363%" y="117" width="0.0917%" height="15" fill="rgb(231,73,38)" fg:x="1456" fg:w="14"/><text x="9.7863%" y="127.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (87 instructions, 0.57%)</title><rect x="9.6280%" y="85" width="0.5698%" height="15" fill="rgb(225,20,46)" fg:x="1470" fg:w="87"/><text x="9.8780%" y="95.50"></text></g><g><title>ic_stable_structures::safe_write (164 instructions, 1.07%)</title><rect x="9.6280%" y="101" width="1.0741%" height="15" fill="rgb(210,31,41)" fg:x="1470" fg:w="164"/><text x="9.8780%" y="111.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (88 instructions, 0.58%)</title><rect x="11.0165%" y="85" width="0.5764%" height="15" fill="rgb(221,200,47)" fg:x="1682" fg:w="88"/><text x="11.2665%" y="95.50"></text></g><g><title>ic_stable_structures::safe_write (164 instructions, 1.07%)</title><rect x="11.0165%" y="101" width="1.0741%" height="15" fill="rgb(226,26,5)" fg:x="1682" fg:w="164"/><text x="11.2665%" y="111.50"></text></g><g><title>ic_stable_structures::btreemap::node::io::NodeWriter&lt;M&gt;::write (424 instructions, 2.78%)</title><rect x="9.6280%" y="117" width="2.7771%" height="15" fill="rgb(249,33,26)" fg:x="1470" fg:w="424"/><text x="9.8780%" y="127.50">ic..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (85 instructions, 0.56%)</title><rect x="12.4050%" y="85" width="0.5567%" height="15" fill="rgb(235,183,28)" fg:x="1894" fg:w="85"/><text x="12.6550%" y="95.50"></text></g><g><title>__rdl_alloc (106 instructions, 0.69%)</title><rect x="12.4050%" y="101" width="0.6943%" height="15" fill="rgb(221,5,38)" fg:x="1894" fg:w="106"/><text x="12.6550%" y="111.50"></text></g><g><title>__rust_alloc (114 instructions, 0.75%)</title><rect x="12.4050%" y="117" width="0.7467%" height="15" fill="rgb(247,18,42)" fg:x="1894" fg:w="114"/><text x="12.6550%" y="127.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (84 instructions, 0.55%)</title><rect x="13.1517%" y="85" width="0.5502%" height="15" fill="rgb(241,131,45)" fg:x="2008" fg:w="84"/><text x="13.4017%" y="95.50"></text></g><g><title>ic_stable_structures::safe_write (160 instructions, 1.05%)</title><rect x="13.1517%" y="101" width="1.0479%" height="15" fill="rgb(249,31,29)" fg:x="2008" fg:w="160"/><text x="13.4017%" y="111.50"></text></g><g><title>ic_stable_structures::btreemap::node::io::NodeWriter&lt;M&gt;::write (209 instructions, 1.37%)</title><rect x="13.1517%" y="117" width="1.3689%" height="15" fill="rgb(225,111,53)" fg:x="2008" fg:w="209"/><text x="13.4017%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (42 instructions, 0.28%)</title><rect x="14.5206%" y="85" width="0.2751%" height="15" fill="rgb(238,160,17)" fg:x="2217" fg:w="42"/><text x="14.7706%" y="95.50"></text></g><g><title>__rdl_dealloc (83 instructions, 0.54%)</title><rect x="14.5206%" y="101" width="0.5436%" height="15" fill="rgb(214,148,48)" fg:x="2217" fg:w="83"/><text x="14.7706%" y="111.50"></text></g><g><title>__rust_dealloc (106 instructions, 0.69%)</title><rect x="14.5206%" y="117" width="0.6943%" height="15" fill="rgb(232,36,49)" fg:x="2217" fg:w="106"/><text x="14.7706%" y="127.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (84 instructions, 0.55%)</title><rect x="15.2148%" y="85" width="0.5502%" height="15" fill="rgb(209,103,24)" fg:x="2323" fg:w="84"/><text x="15.4648%" y="95.50"></text></g><g><title>ic_stable_structures::safe_write (160 instructions, 1.05%)</title><rect x="15.2148%" y="101" width="1.0479%" height="15" fill="rgb(229,88,8)" fg:x="2323" fg:w="160"/><text x="15.4648%" y="111.50"></text></g><g><title>&lt;ic_stable_structures::btreemap::node::io::NodeIterator as core::iter::traits::iterator::Iterator&gt;::next (50 instructions, 0.33%)</title><rect x="16.5772%" y="101" width="0.3275%" height="15" fill="rgb(213,181,19)" fg:x="2531" fg:w="50"/><text x="16.8272%" y="111.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (1,081 instructions, 7.08%)</title><rect x="16.9046%" y="85" width="7.0802%" height="15" fill="rgb(254,191,54)" fg:x="2581" fg:w="1081"/><text x="17.1546%" y="95.50">&lt;ic_stable..</text></g><g><title>ic_stable_structures::safe_write (1,157 instructions, 7.58%)</title><rect x="16.9046%" y="101" width="7.5779%" height="15" fill="rgb(241,83,37)" fg:x="2581" fg:w="1157"/><text x="17.1546%" y="111.50">ic_stable_..</text></g><g><title>&lt;ic_stable_structures::btreemap::node::io::NodeIterator as core::iter::traits::iterator::Iterator&gt;::next (84 instructions, 0.55%)</title><rect x="24.4826%" y="101" width="0.5502%" height="15" fill="rgb(233,36,39)" fg:x="3738" fg:w="84"/><text x="24.7326%" y="111.50"></text></g><g><title>ic_stable_structures::memory_manager::MemoryManagerInner&lt;M&gt;::read_unsafe (68 instructions, 0.45%)</title><rect x="25.0327%" y="85" width="0.4454%" height="15" fill="rgb(226,3,54)" fg:x="3822" fg:w="68"/><text x="25.2827%" y="95.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (96 instructions, 0.63%)</title><rect x="25.4781%" y="69" width="0.6288%" height="15" fill="rgb(245,192,40)" fg:x="3890" fg:w="96"/><text x="25.7281%" y="79.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (96 instructions, 0.63%)</title><rect x="26.6047%" y="69" width="0.6288%" height="15" fill="rgb(238,167,29)" fg:x="4062" fg:w="96"/><text x="26.8547%" y="79.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (128 instructions, 0.84%)</title><rect x="27.7312%" y="69" width="0.8384%" height="15" fill="rgb(232,182,51)" fg:x="4234" fg:w="128"/><text x="27.9812%" y="79.50"></text></g><g><title>ic_stable_structures::safe_write (548 instructions, 3.59%)</title><rect x="25.4781%" y="85" width="3.5892%" height="15" fill="rgb(231,60,39)" fg:x="3890" fg:w="548"/><text x="25.7281%" y="95.50">ic_s..</text></g><g><title>ic_stable_structures::btreemap::allocator::Allocator&lt;M&gt;::allocate (923 instructions, 6.05%)</title><rect x="25.0327%" y="101" width="6.0453%" height="15" fill="rgb(208,69,12)" fg:x="3822" fg:w="923"/><text x="25.2827%" y="111.50">ic_stabl..</text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (83 instructions, 0.54%)</title><rect x="31.0781%" y="101" width="0.5436%" height="15" fill="rgb(235,93,37)" fg:x="4745" fg:w="83"/><text x="31.3281%" y="111.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (88 instructions, 0.58%)</title><rect x="31.6217%" y="85" width="0.5764%" height="15" fill="rgb(213,116,39)" fg:x="4828" fg:w="88"/><text x="31.8717%" y="95.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (88 instructions, 0.58%)</title><rect x="32.7024%" y="85" width="0.5764%" height="15" fill="rgb(222,207,29)" fg:x="4993" fg:w="88"/><text x="32.9524%" y="95.50"></text></g><g><title>ic_stable_structures::safe_write (329 instructions, 2.15%)</title><rect x="31.6217%" y="101" width="2.1548%" height="15" fill="rgb(206,96,30)" fg:x="4828" fg:w="329"/><text x="31.8717%" y="111.50">i..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (85 instructions, 0.56%)</title><rect x="33.7765%" y="37" width="0.5567%" height="15" fill="rgb(218,138,4)" fg:x="5157" fg:w="85"/><text x="34.0265%" y="47.50"></text></g><g><title>__rdl_alloc (106 instructions, 0.69%)</title><rect x="33.7765%" y="53" width="0.6943%" height="15" fill="rgb(250,191,14)" fg:x="5157" fg:w="106"/><text x="34.0265%" y="63.50"></text></g><g><title>__rust_alloc (114 instructions, 0.75%)</title><rect x="33.7765%" y="69" width="0.7467%" height="15" fill="rgb(239,60,40)" fg:x="5157" fg:w="114"/><text x="34.0265%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (162 instructions, 1.06%)</title><rect x="33.7765%" y="85" width="1.0610%" height="15" fill="rgb(206,27,48)" fg:x="5157" fg:w="162"/><text x="34.0265%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (243 instructions, 1.59%)</title><rect x="33.7765%" y="101" width="1.5916%" height="15" fill="rgb(225,35,8)" fg:x="5157" fg:w="243"/><text x="34.0265%" y="111.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (1,093 instructions, 7.16%)</title><rect x="35.3681%" y="85" width="7.1588%" height="15" fill="rgb(250,213,24)" fg:x="5400" fg:w="1093"/><text x="35.6181%" y="95.50">&lt;ic_stable..</text></g><g><title>ic_stable_structures::safe_write (1,169 instructions, 7.66%)</title><rect x="35.3681%" y="101" width="7.6565%" height="15" fill="rgb(247,123,22)" fg:x="5400" fg:w="1169"/><text x="35.6181%" y="111.50">ic_stable_..</text></g><g><title>&lt;ic_stable_structures::btreemap::node::io::NodeIterator as core::iter::traits::iterator::Iterator&gt;::next (84 instructions, 0.55%)</title><rect x="43.0246%" y="101" width="0.5502%" height="15" fill="rgb(231,138,38)" fg:x="6569" fg:w="84"/><text x="43.2746%" y="111.50"></text></g><g><title>ic_stable_structures::memory_manager::MemoryManagerInner&lt;M&gt;::read_unsafe (68 instructions, 0.45%)</title><rect x="43.5748%" y="85" width="0.4454%" height="15" fill="rgb(231,145,46)" fg:x="6653" fg:w="68"/><text x="43.8248%" y="95.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (96 instructions, 0.63%)</title><rect x="44.0202%" y="69" width="0.6288%" height="15" fill="rgb(251,118,11)" fg:x="6721" fg:w="96"/><text x="44.2702%" y="79.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (96 instructions, 0.63%)</title><rect x="45.1467%" y="69" width="0.6288%" height="15" fill="rgb(217,147,25)" fg:x="6893" fg:w="96"/><text x="45.3967%" y="79.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (128 instructions, 0.84%)</title><rect x="46.2733%" y="69" width="0.8384%" height="15" fill="rgb(247,81,37)" fg:x="7065" fg:w="128"/><text x="46.5233%" y="79.50"></text></g><g><title>ic_stable_structures::safe_write (548 instructions, 3.59%)</title><rect x="44.0202%" y="85" width="3.5892%" height="15" fill="rgb(209,12,38)" fg:x="6721" fg:w="548"/><text x="44.2702%" y="95.50">ic_s..</text></g><g><title>ic_stable_structures::btreemap::allocator::Allocator&lt;M&gt;::allocate (923 instructions, 6.05%)</title><rect x="43.5748%" y="101" width="6.0453%" height="15" fill="rgb(227,1,9)" fg:x="6653" fg:w="923"/><text x="43.8248%" y="111.50">ic_stabl..</text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (83 instructions, 0.54%)</title><rect x="49.6201%" y="101" width="0.5436%" height="15" fill="rgb(248,47,43)" fg:x="7576" fg:w="83"/><text x="49.8701%" y="111.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (88 instructions, 0.58%)</title><rect x="50.1637%" y="85" width="0.5764%" height="15" fill="rgb(221,10,30)" fg:x="7659" fg:w="88"/><text x="50.4137%" y="95.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (88 instructions, 0.58%)</title><rect x="51.2444%" y="85" width="0.5764%" height="15" fill="rgb(210,229,1)" fg:x="7824" fg:w="88"/><text x="51.4944%" y="95.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (1,093 instructions, 7.16%)</title><rect x="52.3186%" y="85" width="7.1588%" height="15" fill="rgb(222,148,37)" fg:x="7988" fg:w="1093"/><text x="52.5686%" y="95.50">&lt;ic_stable..</text></g><g><title>ic_stable_structures::safe_write (1,498 instructions, 9.81%)</title><rect x="50.1637%" y="101" width="9.8114%" height="15" fill="rgb(234,67,33)" fg:x="7659" fg:w="1498"/><text x="50.4137%" y="111.50">ic_stable_stru..</text></g><g><title>&lt;ic_stable_structures::btreemap::node::io::NodeIterator as core::iter::traits::iterator::Iterator&gt;::next (84 instructions, 0.55%)</title><rect x="59.9751%" y="101" width="0.5502%" height="15" fill="rgb(247,98,35)" fg:x="9157" fg:w="84"/><text x="60.2251%" y="111.50"></text></g><g><title>ic_stable_structures::memory_manager::MemoryManagerInner&lt;M&gt;::read_unsafe (68 instructions, 0.45%)</title><rect x="60.5253%" y="85" width="0.4454%" height="15" fill="rgb(247,138,52)" fg:x="9241" fg:w="68"/><text x="60.7753%" y="95.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (96 instructions, 0.63%)</title><rect x="60.9707%" y="69" width="0.6288%" height="15" fill="rgb(213,79,30)" fg:x="9309" fg:w="96"/><text x="61.2207%" y="79.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (1,096 instructions, 7.18%)</title><rect x="62.0972%" y="69" width="7.1784%" height="15" fill="rgb(246,177,23)" fg:x="9481" fg:w="1096"/><text x="62.3472%" y="79.50">&lt;ic_stable..</text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (128 instructions, 0.84%)</title><rect x="69.7734%" y="69" width="0.8384%" height="15" fill="rgb(230,62,27)" fg:x="10653" fg:w="128"/><text x="70.0234%" y="79.50"></text></g><g><title>ic_stable_structures::safe_write (1,548 instructions, 10.14%)</title><rect x="60.9707%" y="85" width="10.1389%" height="15" fill="rgb(216,154,8)" fg:x="9309" fg:w="1548"/><text x="61.2207%" y="95.50">ic_stable_struc..</text></g><g><title>ic_stable_structures::btreemap::allocator::Allocator&lt;M&gt;::allocate (1,924 instructions, 12.60%)</title><rect x="60.5253%" y="101" width="12.6015%" height="15" fill="rgb(244,35,45)" fg:x="9241" fg:w="1924"/><text x="60.7753%" y="111.50">ic_stable_structure..</text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (83 instructions, 0.54%)</title><rect x="73.1268%" y="101" width="0.5436%" height="15" fill="rgb(251,115,12)" fg:x="11165" fg:w="83"/><text x="73.3768%" y="111.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (88 instructions, 0.58%)</title><rect x="73.6704%" y="85" width="0.5764%" height="15" fill="rgb(240,54,50)" fg:x="11248" fg:w="88"/><text x="73.9204%" y="95.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (88 instructions, 0.58%)</title><rect x="74.7446%" y="85" width="0.5764%" height="15" fill="rgb(233,84,52)" fg:x="11412" fg:w="88"/><text x="74.9946%" y="95.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (126 instructions, 0.83%)</title><rect x="75.8187%" y="85" width="0.8253%" height="15" fill="rgb(207,117,47)" fg:x="11576" fg:w="126"/><text x="76.0687%" y="95.50"></text></g><g><title>ic_stable_structures::safe_write (530 instructions, 3.47%)</title><rect x="73.6704%" y="101" width="3.4713%" height="15" fill="rgb(249,43,39)" fg:x="11248" fg:w="530"/><text x="73.9204%" y="111.50">ic_..</text></g><g><title>&lt;ic_stable_structures::btreemap::node::io::NodeIterator as core::iter::traits::iterator::Iterator&gt;::next (6 instructions, 0.04%)</title><rect x="77.1417%" y="101" width="0.0393%" height="15" fill="rgb(209,38,44)" fg:x="11778" fg:w="6"/><text x="77.3917%" y="111.50"></text></g><g><title>ic_stable_structures::btreemap::node::io::NodeWriter&lt;M&gt;::write (10,472 instructions, 68.59%)</title><rect x="15.2148%" y="117" width="68.5879%" height="15" fill="rgb(236,212,23)" fg:x="2323" fg:w="10472"/><text x="15.4648%" y="127.50">ic_stable_structures::btreemap::node::io::NodeWriter&lt;M&gt;::write</text></g><g><title>ic_stable_structures::btreemap::node::io::compute_num_overflow_pages_needed (37 instructions, 0.24%)</title><rect x="83.8027%" y="101" width="0.2423%" height="15" fill="rgb(242,79,21)" fg:x="12795" fg:w="37"/><text x="84.0527%" y="111.50"></text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (88 instructions, 0.58%)</title><rect x="84.0451%" y="85" width="0.5764%" height="15" fill="rgb(211,96,35)" fg:x="12832" fg:w="88"/><text x="84.2951%" y="95.50"></text></g><g><title>ic_stable_structures::safe_write (164 instructions, 1.07%)</title><rect x="84.0451%" y="101" width="1.0741%" height="15" fill="rgb(253,215,40)" fg:x="12832" fg:w="164"/><text x="84.2951%" y="111.50"></text></g><g><title>ic_stable_structures::btreemap::node::io::NodeWriter&lt;M&gt;::deallocate_unused_pages (293 instructions, 1.92%)</title><rect x="83.8027%" y="117" width="1.9190%" height="15" fill="rgb(211,81,21)" fg:x="12795" fg:w="293"/><text x="84.0527%" y="127.50">i..</text></g><g><title>ic_stable_structures::btreemap::node::Node&lt;K&gt;::save (12,400 instructions, 81.22%)</title><rect x="9.5363%" y="133" width="81.2156%" height="15" fill="rgb(208,190,38)" fg:x="1456" fg:w="12400"/><text x="9.7863%" y="143.50">ic_stable_structures::btreemap::node::Node&lt;K&gt;::save</text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::write (108 instructions, 0.71%)</title><rect x="90.7519%" y="101" width="0.7074%" height="15" fill="rgb(235,213,38)" fg:x="13856" fg:w="108"/><text x="91.0019%" y="111.50"></text></g><g><title>ic_stable_structures::safe_write (184 instructions, 1.21%)</title><rect x="90.7519%" y="117" width="1.2051%" height="15" fill="rgb(237,122,38)" fg:x="13856" fg:w="184"/><text x="91.0019%" y="127.50"></text></g><g><title>ic_stable_structures::btreemap::BTreeMap&lt;K,V,M&gt;::write_header (201 instructions, 1.32%)</title><rect x="90.7519%" y="133" width="1.3165%" height="15" fill="rgb(244,218,35)" fg:x="13856" fg:w="201"/><text x="91.0019%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (42 instructions, 0.28%)</title><rect x="92.0684%" y="101" width="0.2751%" height="15" fill="rgb(240,68,47)" fg:x="14057" fg:w="42"/><text x="92.3184%" y="111.50"></text></g><g><title>__rdl_dealloc (83 instructions, 0.54%)</title><rect x="92.0684%" y="117" width="0.5436%" height="15" fill="rgb(210,16,53)" fg:x="14057" fg:w="83"/><text x="92.3184%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (69 instructions, 0.45%)</title><rect x="92.7692%" y="101" width="0.4519%" height="15" fill="rgb(235,124,12)" fg:x="14164" fg:w="69"/><text x="93.0192%" y="111.50"></text></g><g><title>__rdl_dealloc (110 instructions, 0.72%)</title><rect x="92.7692%" y="117" width="0.7205%" height="15" fill="rgb(224,169,11)" fg:x="14164" fg:w="110"/><text x="93.0192%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (20 instructions, 0.13%)</title><rect x="93.6403%" y="85" width="0.1310%" height="15" fill="rgb(250,166,2)" fg:x="14297" fg:w="20"/><text x="93.8903%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.65%)</title><rect x="93.6403%" y="101" width="0.6550%" height="15" fill="rgb(242,216,29)" fg:x="14297" fg:w="100"/><text x="93.8903%" y="111.50"></text></g><g><title>__rdl_dealloc (141 instructions, 0.92%)</title><rect x="93.6403%" y="117" width="0.9235%" height="15" fill="rgb(230,116,27)" fg:x="14297" fg:w="141"/><text x="93.8903%" y="127.50"></text></g><g><title>__rust_dealloc (404 instructions, 2.65%)</title><rect x="92.0684%" y="133" width="2.6461%" height="15" fill="rgb(228,99,48)" fg:x="14057" fg:w="404"/><text x="92.3184%" y="143.50">__..</text></g><g><title>ic_stable_structures::btreemap::BTreeMap&lt;K,V,M&gt;::insert_nonfull (13,618 instructions, 89.19%)</title><rect x="7.9054%" y="149" width="89.1931%" height="15" fill="rgb(253,11,6)" fg:x="1207" fg:w="13618"/><text x="8.1554%" y="159.50">ic_stable_structures::btreemap::BTreeMap&lt;K,V,M&gt;::insert_nonfull</text></g><g><title>ic_stable_structures::btreemap::BTreeMap&lt;K,V,M&gt;::insert (15,012 instructions, 98.32%)</title><rect x="0.0000%" y="165" width="98.3233%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="15012"/><text x="0.2500%" y="175.50">ic_stable_structures::btreemap::BTreeMap&lt;K,V,M&gt;::insert</text></g><g><title>all (15,268 instructions, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,97,10)" fg:x="0" fg:w="15268"/><text x="0.2500%" y="207.50"></text></g><g><title>test_flamegraph (15,268 instructions, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(233,208,19)" fg:x="0" fg:w="15268"/><text x="0.2500%" y="191.50">test_flamegraph</text></g></svg></svg>